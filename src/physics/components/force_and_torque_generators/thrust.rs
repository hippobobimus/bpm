use bevy::math::DVec3;

use crate::{
    constants,
    physics::components::Force,
    physics::systems::force_and_torque,
};

#[derive(Debug)]
/// A force generator representing thrust on a body.
pub struct Thrust {
    force: DVec3,
    magnitude: f64,
}

impl Thrust {
    /// Creates a new thrust force generator, where the thrust force(s) when applied will be of the
    /// given magnitude.
    pub fn new(magnitude: f64) -> Self {
        Self {
            force: Default::default(),
            magnitude,
        }
    }

    /// Cuts thrust in the given direction. The direction is given in global coords.
    pub fn disengage(&mut self, dir: &DVec3) {
        self.force -= self.magnitude * dir.normalize();
    }

    /// Adds thrust in the given direction. The direction is given in global coords.
    pub fn engage(&mut self, dir: &DVec3) {
        self.force += self.magnitude * dir.normalize();
    }

    /// Adds the force currently generated by thrust to the given Force accumulator.
    pub fn update_force(&self, force_accum: &mut Force) {
        // Thrust is considered to act through the centre of mass and therefore not introduce any
        // torque.
        force_and_torque::add_force(self.force, force_accum);
    }
}

impl Default for Thrust {
    fn default() -> Self {
        Self {
            force: Default::default(),
            magnitude: constants::DEFAULT_THRUST,
        }
    }
}
