use bevy::math::DVec3;

use crate::{
    constants,
    physics::components::Force,
    physics::systems::force_and_torque,
};

#[derive(Debug)]
/// A force generator for Gravity.
pub struct Gravity {
    g: DVec3,
}

impl Gravity {
    /// Creates a new gravity force generator with the given value for g.
    pub fn new(g: DVec3) -> Self {
        Self { g }
    }

    /// Adds the force generated by gravity acting on the given mass to the given Force accumulator.
    pub fn update_force(&self, force_accum: &mut Force, mass: f64) {
        force_and_torque::add_force(self.force(mass), force_accum);

    }

    /// Returns the force currently generated by gravity on the given mass.
    fn force(&self, mass: f64) -> DVec3 {
        mass * self.g
    }

    /// Returns the current force of gravity as a vector.
    pub fn vector(&self, mass: f64) -> DVec3 {
        self.force(mass)
    }
}

impl Default for Gravity {
    fn default() -> Self {
        Self {
            g: *constants::DEFAULT_GRAVITY,
        }
    }
}
